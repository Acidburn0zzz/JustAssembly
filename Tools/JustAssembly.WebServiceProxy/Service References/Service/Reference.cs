//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JustAssembly.WebServiceProxy.Service {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ToolVersion", Namespace="http://schemas.datacontract.org/2004/07/Entities")]
    [System.SerializableAttribute()]
    public partial class ToolVersion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BugFixesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsInternalBuildField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NewFeaturesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ToolVersionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BugFixes {
            get {
                return this.BugFixesField;
            }
            set {
                if ((object.ReferenceEquals(this.BugFixesField, value) != true)) {
                    this.BugFixesField = value;
                    this.RaisePropertyChanged("BugFixes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInternalBuild {
            get {
                return this.IsInternalBuildField;
            }
            set {
                if ((this.IsInternalBuildField.Equals(value) != true)) {
                    this.IsInternalBuildField = value;
                    this.RaisePropertyChanged("IsInternalBuild");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NewFeatures {
            get {
                return this.NewFeaturesField;
            }
            set {
                if ((object.ReferenceEquals(this.NewFeaturesField, value) != true)) {
                    this.NewFeaturesField = value;
                    this.RaisePropertyChanged("NewFeatures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToolVersionID {
            get {
                return this.ToolVersionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ToolVersionIDField, value) != true)) {
                    this.ToolVersionIDField = value;
                    this.RaisePropertyChanged("ToolVersionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserCredentials", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class UserCredentials : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderMailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UserTelerikAccountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderMail {
            get {
                return this.SenderMailField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderMailField, value) != true)) {
                    this.SenderMailField = value;
                    this.RaisePropertyChanged("SenderMail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserKey {
            get {
                return this.UserKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.UserKeyField, value) != true)) {
                    this.UserKeyField = value;
                    this.RaisePropertyChanged("UserKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UserTelerikAccount {
            get {
                return this.UserTelerikAccountField;
            }
            set {
                if ((this.UserTelerikAccountField.Equals(value) != true)) {
                    this.UserTelerikAccountField = value;
                    this.RaisePropertyChanged("UserTelerikAccount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VersionInfo", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class VersionInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Net.Cookie AuthenticationCookieField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DownloadUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JustAssembly.WebServiceProxy.Service.FileType FileTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Net.Cookie AuthenticationCookie {
            get {
                return this.AuthenticationCookieField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthenticationCookieField, value) != true)) {
                    this.AuthenticationCookieField = value;
                    this.RaisePropertyChanged("AuthenticationCookie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DownloadUrl {
            get {
                return this.DownloadUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.DownloadUrlField, value) != true)) {
                    this.DownloadUrlField = value;
                    this.RaisePropertyChanged("DownloadUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JustAssembly.WebServiceProxy.Service.FileType FileType {
            get {
                return this.FileTypeField;
            }
            set {
                if ((this.FileTypeField.Equals(value) != true)) {
                    this.FileTypeField = value;
                    this.RaisePropertyChanged("FileType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileType", Namespace="http://schemas.datacontract.org/2004/07/Telerik.WebSite.DataContracts")]
    public enum FileType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Official = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NightBuild = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CookieVariant", Namespace="http://schemas.datacontract.org/2004/07/System.Net")]
    public enum CookieVariant : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Plain = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rfc2109 = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rfc2965 = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PluginConfig", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class PluginConfig : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DownloadUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private JustAssembly.WebServiceProxy.Service.PluginConfigLicense[] LicensesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupportedJDversionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DownloadUrl {
            get {
                return this.DownloadUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.DownloadUrlField, value) != true)) {
                    this.DownloadUrlField = value;
                    this.RaisePropertyChanged("DownloadUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Guid {
            get {
                return this.GuidField;
            }
            set {
                if ((object.ReferenceEquals(this.GuidField, value) != true)) {
                    this.GuidField = value;
                    this.RaisePropertyChanged("Guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JustAssembly.WebServiceProxy.Service.PluginConfigLicense[] Licenses {
            get {
                return this.LicensesField;
            }
            set {
                if ((object.ReferenceEquals(this.LicensesField, value) != true)) {
                    this.LicensesField = value;
                    this.RaisePropertyChanged("Licenses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupportedJDversion {
            get {
                return this.SupportedJDversionField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportedJDversionField, value) != true)) {
                    this.SupportedJDversionField = value;
                    this.RaisePropertyChanged("SupportedJDversion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PluginConfigLicense", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class PluginConfigLicense : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string titleFieldField;
        
        private string valueFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string titleField {
            get {
                return this.titleFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.titleFieldField, value) != true)) {
                    this.titleFieldField = value;
                    this.RaisePropertyChanged("titleField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string valueField {
            get {
                return this.valueFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.valueFieldField, value) != true)) {
                    this.valueFieldField = value;
                    this.RaisePropertyChanged("valueField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BannerEntity", Namespace="http://schemas.datacontract.org/2004/07/Data.Entities")]
    [System.SerializableAttribute()]
    public partial class BannerEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DownloadUriField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DownloadUri {
            get {
                return this.DownloadUriField;
            }
            set {
                if ((object.ReferenceEquals(this.DownloadUriField, value) != true)) {
                    this.DownloadUriField = value;
                    this.RaisePropertyChanged("DownloadUri");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BannerConfig", Namespace="http://schemas.datacontract.org/2004/07/Banner")]
    [System.SerializableAttribute()]
    public partial class BannerConfig : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DisplayPriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HolderIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DisplayPriority {
            get {
                return this.DisplayPriorityField;
            }
            set {
                if ((this.DisplayPriorityField.Equals(value) != true)) {
                    this.DisplayPriorityField = value;
                    this.RaisePropertyChanged("DisplayPriority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public int HolderId {
            get {
                return this.HolderIdField;
            }
            set {
                if ((this.HolderIdField.Equals(value) != true)) {
                    this.HolderIdField = value;
                    this.RaisePropertyChanged("HolderId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service.IUpdatesService")]
    public interface IUpdatesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/CheckForLatestVersion", ReplyAction="http://tempuri.org/IUpdatesService/CheckForLatestVersionResponse")]
        bool CheckForLatestVersion(string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/CheckForLatestVersion", ReplyAction="http://tempuri.org/IUpdatesService/CheckForLatestVersionResponse")]
        System.Threading.Tasks.Task<bool> CheckForLatestVersionAsync(string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/CheckForLatestOrInternalVersion", ReplyAction="http://tempuri.org/IUpdatesService/CheckForLatestOrInternalVersionResponse")]
        bool CheckForLatestOrInternalVersion(string version, bool includeInternalBuilds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/CheckForLatestOrInternalVersion", ReplyAction="http://tempuri.org/IUpdatesService/CheckForLatestOrInternalVersionResponse")]
        System.Threading.Tasks.Task<bool> CheckForLatestOrInternalVersionAsync(string version, bool includeInternalBuilds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetLatestToolVersions", ReplyAction="http://tempuri.org/IUpdatesService/GetLatestToolVersionsResponse")]
        JustAssembly.WebServiceProxy.Service.ToolVersion[] GetLatestToolVersions(string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetLatestToolVersions", ReplyAction="http://tempuri.org/IUpdatesService/GetLatestToolVersionsResponse")]
        System.Threading.Tasks.Task<JustAssembly.WebServiceProxy.Service.ToolVersion[]> GetLatestToolVersionsAsync(string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetLatestOrInternalToolVersions", ReplyAction="http://tempuri.org/IUpdatesService/GetLatestOrInternalToolVersionsResponse")]
        JustAssembly.WebServiceProxy.Service.ToolVersion[] GetLatestOrInternalToolVersions(string version, bool includeInternalBuilds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetLatestOrInternalToolVersions", ReplyAction="http://tempuri.org/IUpdatesService/GetLatestOrInternalToolVersionsResponse")]
        System.Threading.Tasks.Task<JustAssembly.WebServiceProxy.Service.ToolVersion[]> GetLatestOrInternalToolVersionsAsync(string version, bool includeInternalBuilds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetLatestVersionUrl", ReplyAction="http://tempuri.org/IUpdatesService/GetLatestVersionUrlResponse")]
        JustAssembly.WebServiceProxy.Service.VersionInfo GetLatestVersionUrl(JustAssembly.WebServiceProxy.Service.UserCredentials credentials, string version, bool canAccessAmazon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetLatestVersionUrl", ReplyAction="http://tempuri.org/IUpdatesService/GetLatestVersionUrlResponse")]
        System.Threading.Tasks.Task<JustAssembly.WebServiceProxy.Service.VersionInfo> GetLatestVersionUrlAsync(JustAssembly.WebServiceProxy.Service.UserCredentials credentials, string version, bool canAccessAmazon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetAvailablePlugins", ReplyAction="http://tempuri.org/IUpdatesService/GetAvailablePluginsResponse")]
        JustAssembly.WebServiceProxy.Service.PluginConfig[] GetAvailablePlugins();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetAvailablePlugins", ReplyAction="http://tempuri.org/IUpdatesService/GetAvailablePluginsResponse")]
        System.Threading.Tasks.Task<JustAssembly.WebServiceProxy.Service.PluginConfig[]> GetAvailablePluginsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetLatestCampaign", ReplyAction="http://tempuri.org/IUpdatesService/GetLatestCampaignResponse")]
        JustAssembly.WebServiceProxy.Service.BannerEntity GetLatestCampaign();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetLatestCampaign", ReplyAction="http://tempuri.org/IUpdatesService/GetLatestCampaignResponse")]
        System.Threading.Tasks.Task<JustAssembly.WebServiceProxy.Service.BannerEntity> GetLatestCampaignAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetBannersConfigsPerVersion", ReplyAction="http://tempuri.org/IUpdatesService/GetBannersConfigsPerVersionResponse")]
        JustAssembly.WebServiceProxy.Service.BannerConfig[] GetBannersConfigsPerVersion(string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetBannersConfigsPerVersion", ReplyAction="http://tempuri.org/IUpdatesService/GetBannersConfigsPerVersionResponse")]
        System.Threading.Tasks.Task<JustAssembly.WebServiceProxy.Service.BannerConfig[]> GetBannersConfigsPerVersionAsync(string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetBannerBytesByVersion", ReplyAction="http://tempuri.org/IUpdatesService/GetBannerBytesByVersionResponse")]
        byte[] GetBannerBytesByVersion(string bannerName, string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/GetBannerBytesByVersion", ReplyAction="http://tempuri.org/IUpdatesService/GetBannerBytesByVersionResponse")]
        System.Threading.Tasks.Task<byte[]> GetBannerBytesByVersionAsync(string bannerName, string version);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/ShouldShowDefaultBanners", ReplyAction="http://tempuri.org/IUpdatesService/ShouldShowDefaultBannersResponse")]
        bool ShouldShowDefaultBanners();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUpdatesService/ShouldShowDefaultBanners", ReplyAction="http://tempuri.org/IUpdatesService/ShouldShowDefaultBannersResponse")]
        System.Threading.Tasks.Task<bool> ShouldShowDefaultBannersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUpdatesServiceChannel : JustAssembly.WebServiceProxy.Service.IUpdatesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdatesServiceClient : System.ServiceModel.ClientBase<JustAssembly.WebServiceProxy.Service.IUpdatesService>, JustAssembly.WebServiceProxy.Service.IUpdatesService {
        
        public UpdatesServiceClient() {
        }
        
        public UpdatesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UpdatesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpdatesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpdatesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CheckForLatestVersion(string version) {
            return base.Channel.CheckForLatestVersion(version);
        }
        
        public System.Threading.Tasks.Task<bool> CheckForLatestVersionAsync(string version) {
            return base.Channel.CheckForLatestVersionAsync(version);
        }
        
        public bool CheckForLatestOrInternalVersion(string version, bool includeInternalBuilds) {
            return base.Channel.CheckForLatestOrInternalVersion(version, includeInternalBuilds);
        }
        
        public System.Threading.Tasks.Task<bool> CheckForLatestOrInternalVersionAsync(string version, bool includeInternalBuilds) {
            return base.Channel.CheckForLatestOrInternalVersionAsync(version, includeInternalBuilds);
        }
        
        public JustAssembly.WebServiceProxy.Service.ToolVersion[] GetLatestToolVersions(string version) {
            return base.Channel.GetLatestToolVersions(version);
        }
        
        public System.Threading.Tasks.Task<JustAssembly.WebServiceProxy.Service.ToolVersion[]> GetLatestToolVersionsAsync(string version) {
            return base.Channel.GetLatestToolVersionsAsync(version);
        }
        
        public JustAssembly.WebServiceProxy.Service.ToolVersion[] GetLatestOrInternalToolVersions(string version, bool includeInternalBuilds) {
            return base.Channel.GetLatestOrInternalToolVersions(version, includeInternalBuilds);
        }
        
        public System.Threading.Tasks.Task<JustAssembly.WebServiceProxy.Service.ToolVersion[]> GetLatestOrInternalToolVersionsAsync(string version, bool includeInternalBuilds) {
            return base.Channel.GetLatestOrInternalToolVersionsAsync(version, includeInternalBuilds);
        }
        
        public JustAssembly.WebServiceProxy.Service.VersionInfo GetLatestVersionUrl(JustAssembly.WebServiceProxy.Service.UserCredentials credentials, string version, bool canAccessAmazon) {
            return base.Channel.GetLatestVersionUrl(credentials, version, canAccessAmazon);
        }
        
        public System.Threading.Tasks.Task<JustAssembly.WebServiceProxy.Service.VersionInfo> GetLatestVersionUrlAsync(JustAssembly.WebServiceProxy.Service.UserCredentials credentials, string version, bool canAccessAmazon) {
            return base.Channel.GetLatestVersionUrlAsync(credentials, version, canAccessAmazon);
        }
        
        public JustAssembly.WebServiceProxy.Service.PluginConfig[] GetAvailablePlugins() {
            return base.Channel.GetAvailablePlugins();
        }
        
        public System.Threading.Tasks.Task<JustAssembly.WebServiceProxy.Service.PluginConfig[]> GetAvailablePluginsAsync() {
            return base.Channel.GetAvailablePluginsAsync();
        }
        
        public JustAssembly.WebServiceProxy.Service.BannerEntity GetLatestCampaign() {
            return base.Channel.GetLatestCampaign();
        }
        
        public System.Threading.Tasks.Task<JustAssembly.WebServiceProxy.Service.BannerEntity> GetLatestCampaignAsync() {
            return base.Channel.GetLatestCampaignAsync();
        }
        
        public JustAssembly.WebServiceProxy.Service.BannerConfig[] GetBannersConfigsPerVersion(string version) {
            return base.Channel.GetBannersConfigsPerVersion(version);
        }
        
        public System.Threading.Tasks.Task<JustAssembly.WebServiceProxy.Service.BannerConfig[]> GetBannersConfigsPerVersionAsync(string version) {
            return base.Channel.GetBannersConfigsPerVersionAsync(version);
        }
        
        public byte[] GetBannerBytesByVersion(string bannerName, string version) {
            return base.Channel.GetBannerBytesByVersion(bannerName, version);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetBannerBytesByVersionAsync(string bannerName, string version) {
            return base.Channel.GetBannerBytesByVersionAsync(bannerName, version);
        }
        
        public bool ShouldShowDefaultBanners() {
            return base.Channel.ShouldShowDefaultBanners();
        }
        
        public System.Threading.Tasks.Task<bool> ShouldShowDefaultBannersAsync() {
            return base.Channel.ShouldShowDefaultBannersAsync();
        }
    }
}
